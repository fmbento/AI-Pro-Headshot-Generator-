import { GoogleGenAI, Modality, GenerateContentResponse } from '@google/genai';
import { ImageData } from '../types';

export const generateHeadshot = async (
  sourceImage: ImageData,
  prompt: string
): Promise<ImageData> => {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable is not set.");
    }
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    const finalPrompt = `${prompt}. IMPORTANT: The output must be a photorealistic headshot that retains the original subject's key facial features and imperfections (like skin texture, moles, scars) for authenticity. You can change the subject's clothing to be appropriate for the context of the photo. Do not airbrush or overly smooth the skin. The final image should look like a real photograph, not a digital painting or illustration.`;

    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: sourceImage.base64,
              mimeType: sourceImage.mimeType,
            },
          },
          {
            text: finalPrompt,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });

    if (!response.candidates || response.candidates.length === 0) {
        let errorMessage = 'Image generation failed. No candidates were returned from the model.';
        if (response.promptFeedback?.blockReason) {
            errorMessage += ` Reason: ${response.promptFeedback.blockReason}. This can be due to safety filters. Please try a different image or prompt.`;
        }
        throw new Error(errorMessage);
    }
    
    const firstCandidate = response.candidates[0];

    if (!firstCandidate.content || !firstCandidate.content.parts || firstCandidate.content.parts.length === 0) {
        let errorMessage = 'Image generation failed: The model returned an empty response.';
        if (firstCandidate.finishReason && firstCandidate.finishReason !== 'STOP') {
             errorMessage += ` The process was stopped due to: ${firstCandidate.finishReason}.`;
        }
        if (response.promptFeedback?.blockReason) {
            errorMessage += ` Block Reason: ${response.promptFeedback.blockReason}. This often happens due to safety filters. Try a different image or prompt.`;
        }
        throw new Error(errorMessage);
    }


    for (const part of firstCandidate.content.parts) {
      if (part.inlineData) {
        return {
          base64: part.inlineData.data,
          mimeType: part.inlineData.mimeType,
          objectUrl: `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`,
        };
      }
    }
    throw new Error('No image was generated by the API.');
};